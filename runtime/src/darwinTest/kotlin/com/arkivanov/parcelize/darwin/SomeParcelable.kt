package com.arkivanov.parcelize.darwin

import kotlinx.cinterop.BetaInteropApi
import kotlinx.cinterop.ExportObjCClass
import platform.Foundation.NSCoder
import platform.Foundation.NSLock
import platform.Foundation.NSMutableArray
import platform.Foundation.NSSecureCodingProtocol
import platform.Foundation.NSString
import platform.Foundation.decodeInt32ForKey
import platform.Foundation.decodeObjectOfClass
import platform.Foundation.encodeInt32
import platform.Foundation.encodeObject

/**
 * An example of Parcelable implementation generated by the plugin.
 */
@Suppress("unused")
class SomeParcelable(
    val str: String,
    val index: Int,
) : Parcelable {

    override fun coding(): NSSecureCodingProtocol =
        CodingImpl(data = this)

    @OptIn(BetaInteropApi::class)
    @ExportObjCClass("Com_Arkivanov_Parcelizle_Darwin_SomeParcelable_CodingImpl")
    private class CodingImpl(
        private val data: SomeParcelable,

        /*
         * A class extending Obj-C protocol must have Obj-C superclass.
         * NSObject doesn't work well as a superclass, decodeObjectOfClass produces a warning - _warnAboutNSObjectInAllowedClasses.
         * NSLock is a good alternative, it implements NSSecureCodingProtocol and doesn't have any methods to implement.
         */
    ) : NSLock(), NSSecureCodingProtocol {
        override fun encodeWithCoder(coder: NSCoder) {
            // A hash of the class signature to detect changes in the class, calculated at compile time.
            coder.encodeInt32(12345, "__parcelize_hash")

            coder.encodeObject(data.str, "str")
            coder.encodeInt32(data.index, "index")
        }

        override fun initWithCoder(coder: NSCoder): NSSecureCodingProtocol {
            if (coder.decodeInt32ForKey("__parcelize_hash") != 12345) {
                throw IllegalStateException("Signature mismatch for SomeParcelable")
            }

            val arr = NSMutableArray()

            arr.addObject(
                SomeParcelable(
                    str = coder.decodeObjectOfClass(NSString, "str") as String,
                    index = coder.decodeInt32ForKey("index"),
                )
            )

            // We need to return a type that implements NSSecureCodingProtocol and allows reading the decoded class.
            return arr
        }
    }
}